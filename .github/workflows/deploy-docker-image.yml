name: CI/CD Pipeline
on:
  workflow_dispatch:
  #Trigger the workflow on pull req from the prod br
  pull_request:
    types: [closed]
    branches:
      - production


jobs:
  # Build and  Deploy
  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        #checkout code
        uses: actions/checkout@v3
        #Set up JDK 19
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '19'
        #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
#Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          python config.py

        shell: bash
        env:
          SSH_KEY: ${{secrets.SSH_PK_PROD}}
          SSH_KEY_PATH: ${{ github.workspace }}/../private.key


  # Delete jar file
  delete-artifact:
    needs: build_and_deploy
    name: Cleanup
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Delete Jar File
        run: rm -rf /home/runner/work/foodmgt/foodmgt/foodmgt-0.0.1-SNAPSHOT.jar
        shell: bash


















#  backend-healthcheck:
#    needs: deploy
#    name: Verify-Deployment
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v3
#      - uses: actions/cache@v2
#        with:
#          path: ~/.cache/pip
#          key: ${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}
#      - name: Health Check
#        run: |
#          pip install -r requirements.txt
#          python healthcheck.py
#        shell: bash
#        env:
#          SSH_KEY: ${{secrets.SSH_KEY}}
#          SSH_KEY_PATH: ${{ github.workspace }}/../private.key